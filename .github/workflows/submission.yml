# Runs process_dataset.py on all new and changed files.
#
# If this workflow is triggered by a `pull_request` event (usually on the
# master branch of the upstream repo), process_datasets.py only performs
# validation. This provides status updates for submission PRs at the base repo
# level.
#
# If this workflow is triggered by a `push` event (usually in a forked repo),
# process_datasets.py is run with --update and --clean, which writes updated
# submission protos and replaces the original submission files in git. Based on
# research by kearnes@, there is no way to commit to a forked repo in an action
# triggered by a `pull_request` event in the upstream repo.

name: Submission

on: [pull_request, push]

jobs:
  process_submission:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout ord-data
      uses: actions/checkout@v2
    - name: Add upstream for comparisons to HEAD
      run: |
        cd "${GITHUB_WORKSPACE}"
        UPSTREAM="https://github.com/Open-Reaction-Database/${GITHUB_REPOSITORY##*/}.git"
        git remote add upstream "${UPSTREAM}"
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
        git fetch --no-tags --prune --depth=1 upstream +refs/heads/*:refs/remotes/upstream/*
    - name: Checkout ord-schema
      uses: actions/checkout@v2
      with:
        repository: Open-Reaction-Database/ord-schema
        path: ord-schema
    - name: Identify changed files
      # NOTE(kearnes): This sets the NUM_CHANGED_FILES variable.
      run: |
        cd "${GITHUB_WORKSPACE}"
        git diff --name-status upstream/main > changed_files.txt
        echo "Found $(wc -l < changed_files.txt | tr -d ' ') changed files"
        cat changed_files.txt
        # Use `|| (( $? == 1 ))` in case no lines match (exit code is nonzero).
        grep -e "\.pbtxt$" changed_files.txt > changed_pbtxt_files.txt || (( $? == 1 ))
        # Use LOCAL_NUM_CHANGED since ::set-env values are not available immediately.
        LOCAL_NUM_CHANGED="$(wc -l < changed_pbtxt_files.txt | tr -d ' ')"
        echo "::set-env name=NUM_CHANGED_FILES::${LOCAL_NUM_CHANGED}"
        echo "Found ${LOCAL_NUM_CHANGED} changed pbtxt files"
        cat changed_pbtxt_files.txt
    - name: Install miniconda
      uses: s-weigand/setup-conda@v1
      with:
        python-version: 3.7
      if: env.NUM_CHANGED_FILES != '0'
    - name: Install dependencies
      run: |
        cd "${GITHUB_WORKSPACE}/ord-schema"
        pip install -r requirements.txt
        conda install -c rdkit rdkit
        python setup.py install
      if: env.NUM_CHANGED_FILES != '0'
    - name: Validate submission
      run: |
        cd "${GITHUB_WORKSPACE}"
        python ./ord-schema/ord_schema/process_dataset.py \
          --input_file=changed_pbtxt_files.txt \
          --base=upstream/main
      if: github.event_name == 'push' && env.NUM_CHANGED_FILES != '0'
    - name: Update submission
      run: |
        cd "${GITHUB_WORKSPACE}"
        python ./ord-schema/ord_schema/process_dataset.py \
          --input_file=changed_pbtxt_files.txt \
          --update \
          --cleanup \
          --base=upstream/main
        git config user.name github-actions
        git config user.email github-actions@github.com
        # Fail gracefully if there is nothing to commit.
        git commit -a -m "Update submission" || (( $? == 1 ))
        git push origin "HEAD:${GITHUB_HEAD_REF}"
      if: github.event_name == 'pull_request' && env.NUM_CHANGED_FILES != '0'
